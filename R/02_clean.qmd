---
title: "02_clean"
format: html
editor: visual
---

# Data Cleaning

## Loading libraries

```{r}
#| eval: true
library("tidyverse")
```

## Loading data

```{r}
#| eval: true
data <- read_tsv("../data/_raw/01_dat_load.tsv")
```

## Data cleaning

### Ensuring global use of Yes/No for binary variables, and NA if information is unknown (U/u/0)

During revision of the data, many faulty characters of U and C appear within columns, only meant for Y or N. The U and C are therefore changed to NA to indicate a missing value.

```{r}
#converting U and C to NA
data_clean_properNA <- data |> 
  #Replacing all C with NA to indicate missing value
  mutate(across(where(is.character), ~ na_if(.,"C"))) |> 
  #Replace all U and u with NA in all columns except for RCONSC, where U = unconscious
  mutate(RCONSC = if_else(RCONSC == "U", "unconscious", RCONSC)) |> 
  mutate(across(where(is.character), ~na_if(.,"U")),
         across(where(is.character), ~na_if(.,"u"))) |> 
  mutate(RCONSC = if_else(RCONSC == "unconscious", "U", RCONSC))
```

In the variable SET14D, a 0 is indicating that it is not known if the subject is alive or dead at the 14 day checkup. We therefore want to change the 0 to NA, indicating that this information is not known.

```{r}

data_clean_properNA2 <- data_clean_properNA |> 
  mutate(SET14D = if_else(SET14D == 0, NA, SET14D))
```

In column DASP14 and FAP, both n and N along with y and Y both indicating No and Yes respectively. To match the general synthax, all letters are made upper case

```{r}
#Making y and n upper case
data_clean_propervar <- data_clean_properNA2 |> 
  mutate(across(c(DASP14,FAP), ~str_to_upper(.)))
```

In the columns DVT14, H14,DDEAD, HTI14, ID14, ISC14, NCB14, NK14, PE14, TRAN14, values are 0 = no and 1 = yes, and to match the other binary variables they will therefore be transformed to N = no and Y = yes.

```{r}

data_clean_propervar2 <- data_clean_propervar |> 
  mutate(across(c(DVT14,H14,DDEAD,HTI14,ID14,ISC14,NCB14,NK14,PE14,TRAN14,STRK14), 
                ~case_when(
                  . == 0 ~ "N",
                  . == 1 ~ "Y")))
```

### Converting all time-values exceeding 59 min and 23 hours to NA

In the two columns minlocal and hourlocal the local time of the randomization study initiation is annotated. This value is not allowed to be higher than 59 min and 23 hours. All values above this is set to NA for missing values.

```{r}
#Replacing all values above 59 in minute and 23 hour with NA
data_clean_truetime <- data_clean_propervar |> 
  mutate(MINLOCAL = if_else(MINLOCAL > 59, NA, MINLOCAL),
         HOURLOCAL = if_else(HOURLOCAL > 23, NA, HOURLOCAL))
```

### Fixing errors made in the gathering of the data

For the pilot study, medium dose of heparin is annotated as high dose. The high dose annotation is changed to medium dose annotation, and the two columns for medium dose of pilot study and following study is merged.

```{r}

#Replacing all H for M for indicating medium dose (Heparin)
data_clean_noH <- data_clean_truetime |> 
  mutate(RXHEP = if_else(RXHEP == "H","M",RXHEP))

#Merging the Hep high and hep medium column, changing unknown to NA
data_clean_correctHepDose <- data_clean_noH |> 
  mutate(across(c(DMH14,DHH14), ~replace_na(.,""))) |> 
  unite(DMH14, c(DMH14,DHH14), sep = "") |> 
  mutate(DMH14 = na_if(DMH14,"")) |> 
  mutate(across(c(DMH14,DLH14), ~na_if(., "U")))
```

The variable STRK14 is annotated as STR14 in the data description, and the column is therefore renamed accordingly

```{r}

data_clean_annotationalign <- data_clean_correctHepDose |> 
  rename("STR14" = STRK14)
```

In the RDATE variable, all times are annotated as polish months and year. We aim to convert this information in two columns, and reencode the polish to english months

```{r}
data_clean_english <- data_clean_annotationalign |> 
  separate_wider_delim(RDATE,delim = "-", names = c("RMONTH","RYEAR")) |> 
  mutate(RMONTH = case_when(
    RMONTH == "sty" ~ "Jan",
    RMONTH == "lut" ~ "Feb",
    RMONTH == "mar" ~ "Mar",
    RMONTH == "kwi" ~ "Apr",
    RMONTH == "maj" ~ "May",
    RMONTH == "cze" ~ "Jun",
    RMONTH == "lip" ~ "Jul",
    RMONTH == "sie" ~ "Aug",
    RMONTH == "wrz" ~ "Sep",
    RMONTH == "pa\x9f" ~ "Oct",
    RMONTH == "lis" ~ "Nov",
    RMONTH == "gru" ~ "Dec"))
```

## Saving final clean data

```{r}
write_tsv(data_clean_english, file = "../data/02_dat_clean.tsv")
```
